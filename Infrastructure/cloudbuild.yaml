steps:
  # STEP 1 - CREATE DJANGO CONTAINER
  - id: Build-container-django-demo
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      docker build -t gcr.io/$PROJECT_ID/django-app -f 'build/demo.Dockerfile' .


  # STEP 2 - PUSH DJANGO CONTAINER
  - id: Push-to-Container-Registry
    name: 'gcr.io/cloud-builders/docker'
    args:
      - push
      - gcr.io/$PROJECT_ID/django-app
    waitFor: [ "Build-container-django-demo" ]


  # STEP 3 - CREATE GCS BUCKET
  - id: Create-bucket
    name: 'gcr.io/cloud-builders/gsutil'
    args: [ 'mb', 'gs://$PROJECT_ID-tfstate']


  # STEP 4 - CREATE K8S CLUSTER
  - id: tf-init-and-plan
    name: 'hashicorp/terraform:1.0.0'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        cd Infrastructure/
        terraform init
        terraform plan
        terraform apply -auto-approve
   

  # STER 5 - CONNECT TO K8S CLUSTER
  - id: Connect-to-GKE
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: gcloud
    args:
      - container
      - clusters
      - get-credentials
      - django-app-cluster
      - --region us-central1
      - --project $PROJECT_ID
    waitFor: [ "tf-init-and-plan" ]


  # STEP 6 - DEPLOY DJANGO CONTAINER TO GKE
  - id: Deploy-to-GKE
    name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'kubectl'
    args:
      - apply
      - -f
      - k8s/django-deployment.yml


  # STEP 7 - DEPLOY DJANGO SERVICE TO GKE
  - id: Deploy-Service-to-GKE
    name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: 'kubectl'
    args:
      - apply
      - -f
      - k8s/django-service.yml