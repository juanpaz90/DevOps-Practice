steps:
#  # STEP 0 - ENABLE NECESSARY APIS
#  - id: API-Container-registry
#    name: 'gcr.io/cloud-builders/gcloud'
#    entrypoint: gcloud
#    args: ['services', 'enable', 'containerregistry.googleapis.com']
#
#  - id: API-Kubernetes-engine-api
#    name: 'gcr.io/cloud-builders/gcloud'
#    entrypoint: gcloud
#    args: [ 'services', 'enable', 'container.googleapis.com' ]
#    waitFor: [ "API-Container-registry" ]

  # STEP 1 - CREATE DJANGO CONTAINER
  - id: Build-container-django-demo
    name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      docker build -t gcr.io/$PROJECT_ID/django-app -f 'build/demo.Dockerfile' .
#    waitFor: [ "API-Container-registry", "API-Kubernetes-engine-api" ]

  # STEP 2 - PUSH DJANGO CONTAINER
  - id: Push-to-Container-Registry
    name: 'gcr.io/cloud-builders/docker'
    args:
      - push
      - gcr.io/$PROJECT_ID/django-app
    waitFor: [ "API-Kubernetes-engine-api", "Build-container-django-demo" ]
#    waitFor: [ "API-Container-registry", "API-Kubernetes-engine-api", "Build-container-django-demo" ]

  # STEP 3 - CREATE CLUSTER USING TERRAFORM
  - id: Create-cluster
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      cd terraform
      terraform init
      terraform apply -auto-approve
    waitFor: [ "API-Kubernetes-engine-api", "Push-to-Container-Registry" ]
#    waitFor: [ "API-Container-registry", "API-Kubernetes-engine-api", "Push-to-Container-Registry" ]
